const { ProductModel } = require("../models/ProductModel")

const productRouter = require("express").Router()
/**
 * @swagger
 *  components:
 *      schemas:
 *          Product:
 *              type: object
 *              properties:
 *                  id:
 *                      type: string
 *                      description: The unique id generated by MongoDB.
 *                      example: 60b94a29f0.......
 *                  brand:
 *                      type: string
 *                      description: Branding of the product.
 *                      example: Nike, Puma, Apple, ...
 *                  title:
 *                      type: string
 *                      description: Title of the product.
 *                      example: Air Force 1
 *                  images:
 *                      type: array
 *                      items:
 *                          type: string
 *                      description: The array of images for the product.
 *                      example: ["image1", "image2", ...]
 *                  price:
 *                      type: number
 *                      description: Price of the product.
 *                      example: 999
 *                  color:
 *                      type: string
 *                      description: Color of the product.
 *                      example: white / black / red / brown
 *                  size:
 *                      type: array
 *                      items:
 *                          type: number
 *                      description: The available sizes of the product.
 *                      example: [5, 6, ...]
 *                  productype:
 *                      type: string
 *                      description: Type of the product.
 *                      example: Bags/Shoes/...
 *                  category:
 *                      type: string
 *                      description: Category of the product
 *                      example: Mens/Womens/...
 *                  description:
 *                      type: array
 *                      items:
 *                          type: object
 *                      description: Details of the product
 *                      example: features and details
 *                  saving:
 *                      type: string
 *                      description: Savings on the Product in Percentage.
 *                      example: 25% / 45% ...
 */

/**
 * @swagger
 *  tags:
 *      name: Products
 *      Description: All the API routes to Products.
 */

// Get Data
/**
 * @swagger
 *  /products:
 *      get:
 *          summary: Showing all Products Data.
 *          tags: [Products]
 *          responses:
 *              '200':
 *                  description: The list of all products.
 *                  content:
 *                      application/json:
 *                          schema: 
 *                              $ref: "#/components/schemas/Product"
 *              '501':
 *                  description: Internal server Error.
 */

productRouter.get("/", async(req, res)=> {
    try {
        let data = await ProductModel.find()
        res.status(200).send(data)
    } catch (error) {
        res.status(501).send(error.message)
    }
})

// Add Data
/**
 * @swagger
 *  /products/add:
 *      post:
 *          summary: Add a new product to Databse
 *          tags: [Products]
 *          requestBody:
 *              required: true
 *              content:
 *                  application/json:
 *                      schema:
 *                          $ref: "#/components/schemas/Product"
 *          responses:
 *              '200':
 *                  description: The Product has been Added Successfully
 *              '400':
 *                  description: Some thing went Wrong
 */

productRouter.post("/add", async(req, res)=>{
    const data = req.body
    try {
        const product = new ProductModel(data)
        const saveProduct = await product.save()
        res.status(200).send("New Product Added Successfully")
    } catch (error) {
        res.status(400).send(error.message)
    }
})

// Update Data
/**
 * @swagger
 *  /products/update/{id}:
 *      patch:
 *          summary: Update the product details
 *          tags: [Products]
 *          parameters:
 *              - in: path
 *                name: id
 *                schema:
 *                  type: string
 *                requirede: true
 *                description: MongoDB id of a particular product.
 *          requestBody:
 *              required: true
 *              content:
 *                  application/json:
 *                      schema:
 *                          $ref: "#components/schemas/Product"
 *          responses:
 *              '200':
 *                  description: Product hasbeen updated Successfully.
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: "#components/schemas/Product"
 *              '400':
 *                  description: Something went wrong.
 */

productRouter.patch("/update/:id", async(req, res)=>{
    const id = req.params.id
    const data = req.body
    try {
        await ProductModel.findByIdAndUpdate(id, data, {new:true})
        res.status(200).send(`product id ${id} hasbeen updated successfully`)
    } catch (error) {
        res.status(400).send(error.message)
    }
})

// Delete Data
/**
 * @swagger
 *  /products/delete/{id}:
 *      delete:
 *          summary: Update the product details
 *          tags: [Products]
 *          parameters:
 *              - in: path
 *                name: id
 *                schema:
 *                  type: string
 *                requirede: true
 *                description: MongoDB id of a particular product.
 *          responses:
 *              '200':
 *                  description: Product hasbeen updated Successfully.
 *              '400':
 *                  description: Something went wrong.
 */

productRouter.delete("/delete/:id", async(req, res)=>{
    const id = req.params.id
    try {
        await ProductModel.findByIdAndDelete(id)
        res.status(200).send(`Product id ${id} hasbeen deleted`)
    } catch (error) {
        res.status(400).send(error.message)
    }
})

module.exports = { productRouter }